# Resume

I'm Faith Olusegun

Welcome to my resume!

It has two parts, my [Professional Experience](#Professional-Experience) and [Open-Source Contributions and Projects](#Open-Source-Contributions-and-Projects).

The resume is available as [.html](/resume.html) and [.pdf](/resume.pdf).

{.page-break}
## Narrative

I am a **Software Engineer** with a passion for building high-performance, scalable systems and modernizing legacy infrastructure. With expertise in **Java/Spring Boot, C#/.NET, Python and cloud technologies**, I thrive in fintech and bioinformatics, blending technical know-how with problem-solving skills.  

By day, I optimize transaction systems and create secure APIs; by night, I contribute to open-source projects and geek out over Rust, LLMs, and compiler design.  

Oh, and I love teaching! Check out my [YouTube channel](https://youtube.com/c/FaithOlusegun) for programming tutorials, or dive into my code on [GitHub](https://github.com/propenster).  

*"Crafting scalable enterprise software solutions and turning legacy systems into lightning-fast solutionsâ€”one line of code at a time."*  



{.page-break}
## Contacts

: Name  
  Faith Olusegun  

: Phone  
  XXX-XXX-XXXX  

: Email  
  faitholusegun60@gmail.com  

: LinkedIn  
  [linkedin.com/in/faith-olusegun](https://linkedin.com/in/faith-olusegun)  

: GitHub  
  [github.com/propenster](https://github.com/propenster)  

: YouTube
  [youtube.com/c/FaithOlusegun](https://youtube.com/c/FaithOlusegun)

## Core Competencies  
- **Fintech Systems:** Modernized legacy platforms (40% cost reduction) and boosted transaction speeds by 25%.  
- **Cloud & APIs:** Azure/IIS deployments with 99.9% uptime; OWASP Top 10 compliance (98%+ scores).  
- **Mentorship:** Cut bug rates by 25-35% via secure coding training.  
- **Languages:** C#, Java, Rust, Python, TypeScript.  

## Education  
* **Iowa State University**  
  M.S. Bioinformatics & Computational Biology 
* **Federal University of Technology Akure**  
  B.Tech Animal Production & Health 

## Professional Experience  

### Interswitch Group  
`Senior Software Engineer`  

`Dec 2023 to Aug 2024`\
<https://www.interswitchgroup.com>

- Architected a high-throughput transaction processing engine using C++ and C#/.NET 8, handling over 5,000 TPS for a major payment gateway with 99.99% uptime.
- Designed a reactive dashboard with React/TypeScript and SignalR for live monitoring of 10M+ daily transactions, reducing incident response time by 50%.  
- Implemented a distributed caching layer with Redis and .NET Core to decrease database load by 40\%, enabling seamless scaling during peak traffic.
- item Developed a cross-border authentication layer using OAuth2 and OpenID Connect (OIDC) with Java 17 and Spring Boot, supporting over 45 APIs for Interswitch's Paydirect International cross-border services.
- Mentored 3 junior engineers on clean architecture (DDD) and performance profiling, improving team bug rate by 25%.


### Parallex Bank Limited  
`Software Engineer`  

`Mar 2022 to Nov 2023`\
<https://www.parallexbank.com>

- Led the development of the bank's high-volume Core Banking API (Finacle integration), serving over 500,000 customers using C#, OracleDB, and FIXML. 
- Implemented a real-time document collaboration feature using Operational Transformation (OT) in React and TypeScript, supporting concurrent edits for 100+ users.
- Automated KYC workflows by integrating Azure Form Recognizer and MongoDB, reducing manual verification time by 70%.
- Refactored a legacy WPF application to Blazor WASM, enhancing maintainability and reducing UI-related support tickets by 40%.

### Fidelity Bank PLC  
`Software Engineer`  

`Jan 2019 to Oct 2021`\
<https://www.fidelitybank.ng>

- Developed a customer-facing loan management portal using Angular and .NET Core, processing over $1M in monthly applications with API latency under 500ms.
- Migrated monolithic .NET Framework APIs to .NET Core microservices, improving deployment frequency by 3x and reducing cloud costs by 35%. 
- Introduced xUnit/NUnit testing for critical APIs, achieving over 85% code coverage and eliminating 90% of production regressions.

### Sobel.io  
`Rust Developer`  
- Contributed to LLM projects (llm-chains, comparator-rs) and fine-tuned emotion-detection models.  

## Projects  
- **Paydirect International Auth Layer**: Java/Spring Boot, Azure Entra ID.  
- **NgXQuickFix**: C#/.NET FIX client for Nigeria Stock Exchange.  
- **Azure API Management Portal**: Configured 50+ policies for security/performance.  

## Technical Skills  
- *Languages:* C#, Java, Rust, Python, JavaScript/TypeScript  
- *Cloud/DevOps:* Azure, AWS, Docker, Kubernetes, ArgoCD  
- *Frameworks:* Spring Boot, .NET Core, React.js, Django  
- *Concepts:* API Design, LLMs, Encryption, Agile, FIX Protocol  

## Open-Source Contributions and Projects 

### NgXQuickFix

*Overview:* **SelfService FIX Trading Client using Nigeria Stock Exchange (NGX) FIX5.0SP1 specification**

NgXQuickFix is a C++/C# FIX engine integration project aimed at enabling direct, programmable trading access to the Nigeria Stock Exchange (NGX) via the FIX protocol. Built on the robust [QuickFIX/N](https://github.com/connamara/quickfixn) engine, this project provides a foundation for automated or algorithmic trading systems and HFT (High-Frequency Trading) strategies tailored for the NGX ecosystem.
\
*Tools:* C#, .NET 9, C++, XML, FIX Protocol, QuickFixN, git. \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/NgXQuickFix>

### trade_sharpp

*Overview:* **A complete suite of High-Frequency Trading setup with C++ backend, C# .NET 8 Frontend (ClientApp), RPC for Order Entry and MarketData FixEngine**

A complete suite of High-Frequency Trading (HFT) setup with C++ backend, C# .NET 8 Frontend (ClientApp), RPC for Order Entry and MarketData FixEngine\

*Tools:* C++ 14/17, XML, CMake, FIX Protocol, grpc, Protobuf, QuickFixN, C#, .NET 9, git. \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/trade_sharpp>

### wdlrunner

*Overview:* **Writing a faster Workflow Definition Language (WDL) Compiler and Runner from scratch in C++**

`wdlrunner` is a performance-focused compiler and executor for WDL scripts, designed with fast parsing, accurate AST generation, and lightweight runtime execution in mind. It supports up to 90% of the WDL 1.0 specification already.\

*Tools:* C++ 17, WDL, CMake, git. \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/wdlrunner>


### File Query Language (FQL)

*Overview:* FQL (File Query Language) is a simple and powerful file querying language designed to 
help you efficiently search and extract information from text files. Whether you need to analyze log 
files, parse JSON, or extract specific content from text files, FQL provides a versatile set of commands 
to simplify the process.\
*Tools:* Rust, VSCode, git. \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/fql>

### PipenGeneX

*Overview:* pipengenex is a powerful framework designed for creating and executing Bioinformatic 
pipeline workflows. It includes a Command-Line Utility (CLI) tool for effortlessly running pipeline workflows 
and tasks defined through JSON workflow definitions. Some notable features of pipengenex include task 
parallelization and flexible workflow configuration.\
*Tools:* Rust, C#, VSCode, git, Perl.\
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/pipengenex>

### ERVCaller-rs

*Overview:* ERVCaller-rs is a rust port of the popular tool designed to accurately detect and genotype 
non-reference unfixed endogenous retroviruses (ERVs) and other transposable elements (TEs) in the 
human genome using next-generation sequencing (NGS) data. The original ERVCaller package was 
written in perl. \
*Tools:* Rust, VSCode, git, Perl. \
*Role:* Author and core maintainer \
*Link(s):* <https://github.com/xunchen85/ERVcaller> <https://github.com/propenster/ERVCaller-rs>

### BioBencher

*Overview:* This is a tool that benchmarks performance and CPU footprint bioinformatics and genomic 
analysis tools particularly MSA, phyllo tools using our base debigenic genomic and bioinformatic analysis 
pipeline.\
*Tools:* C#, Rust, docker, git, debigenic, BEDTools, BLAST, Clustalw2, Phylip, HMMER, MUMER, QuEST, VELVET. \
*Role:* Author and core maintainer \
*Link(s):* <https://github.com/propenster/biobencher>
<https://hub.docker.com/repository/docker/propenster/debigenic>

### debigenic

*Overview:* is an open-source genomic and bioinformatics data analysis pipeline that runs on Debian 
Linux (Ubuntu 22.04) and contains a setup of over 50 genomic and bioinformatic exploration and 
analysis tools. It is reproducible, duplicatable, sharable, usable and extendable by anyone, any 
researcher anywhere in the world. With debigenic, you do no not need to carry an office or research 
computer anywhere, just find any PC or laptop that could run docker and you have a whole virtual 
machine (container) that has everything you need for bioinformatics at least almost every tool you 
might need. It is like you could carry your bioinformatics lab everywhere and in fact share you lab with 
anyone you want irrespective of where they are.\
*Tools:* docker, linux bash shell, git.\
*Role:* Author and core maintainer \
*Link:* <https://hub.docker.com/repository/docker/propenster/debigenic/general>

### Clash

*Overview:* is a simple to use, efficient, and full-featured Command Line Argument Parser library for C# 
.NET. You can use Clash in your CLI applications to parse CommandLine Arguments to C# objects.\
*Tools:* C#, Visual Studio, git \
*Role:* Author and Core Maintainer \
*Link:* <https://github.com/propenster/Clash>

### SimpleHTMLParser

*Overview:* SimpleHTMLParser is a simple to use, efficient, and full-featured HTML Document Parser for C#. 
You can parse an HTML document and retrieve any element(s) in it.\
*Tools:* C#, Visual Studio, git \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/simplehtmlparser>

### VealFramework

*Overview:* A fast, experimental web development framework or microframework for C#. It is meant to be 
faster, simpler and much easier to run anywhere than Microsoftâ€™s ASP.NET Core. I call it a lightweight 
web development framework written in 100% C#.\
*Tools:* C#, Visual Studio, git \
*Role:* Author and core maintainer \
*Link:* <https://github.com/propenster/veal>

### Selenium-rs

*Overview:* `selenium-rs` is A rust client for the Selenium webdriver (WIP). \
*Tools:* rust, cargo, rustfmt, git, selenium web driver.\
*Role:* Contributor \
*Link:* <https://github.com/saresend/selenium-rs>

### llm-chain

*Overview:* `llm-chain` is a powerful rust crate for building chains in large language models allowing you 
to summarise text and complete complex tasks. \
*Tools:* rust, cargo, rustfmt, git.\
*Role:* Contributor \
*Link:* <https://github.com/sobelio/llm-chain>

### Faker.NET

*Overview:* I created and I am maintaining a NUGET package for .NET developers to generate 
dummy/fake data for collections. \
*Tools:* C#, Github markdown, .NET Standard, xUnit.\
*Role:* Author and core maintainer\
*Link:* <https://github.com/propenster/Faker.Net>

### Sluggify-rs

*Overview:* A simple slug or clean URL generator library for Rust.\
*Tools:* Rust, Github markdown, cargo, crates.io.\
*Role:* Author and core maintainer\
*Link:* <https://github.com/propenster/sluggify-rs>

### RestSharp

*Overview:* Simple REST and HTTP API Client for. NET.\
*Tools:* C#, markdown.\
*Role:* Contributor \
*Link:* <https://github.com/restsharp/RestSharp>

### llcc94

*Overview:* Writing a compiler using Rust. \
*Tools:* rustlang, cargo, git.\
*Role:* Contributor\
*Link:* <https://github.com/propenster/llcc94>
